name: Build and Publish Debian Package

on:
  push:
    branches:
      - production
    tags:
      - 'v*'
  workflow_dispatch:

env:
  DEBFULLNAME: ${{ secrets.DEBFULLNAME }}
  DEBEMAIL: ${{ secrets.DEBEMAIL }}
  DEBIAN_FRONTEND: noninteractive
  PPA_URL: "ppa:anksji/stackops"

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            devscripts \
            debhelper \
            dh-make \
            gnupg \
            python3-all \
            python3-setuptools \
            dh-python \
            rsync \
            build-essential \
            lintian \
            pybuild

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools wheel

      - name: Set up GPG
        run: |
          # Create fresh GPG directory
          export GNUPGHOME="$(mktemp -d)"
          chmod 700 "$GNUPGHOME"
          
          # Configure GPG
          cat > "$GNUPGHOME/gpg.conf" << EOF
          use-agent
          pinentry-mode loopback
          no-tty
          EOF
          
          # Import keys
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo "${{ secrets.GPG_PUBLIC_KEY }}" | gpg --batch --import
          
          # Trust the key
          echo -e "5\ny\n" | gpg --batch --command-fd 0 --expert --edit-key ${{ secrets.GPG_KEY_ID }} trust
          
          # Show imported keys
          echo "Imported GPG keys:"
          gpg --list-secret-keys --keyid-format LONG
          
          # Set global GNUPGHOME for future steps
          echo "GNUPGHOME=$GNUPGHOME" >> $GITHUB_ENV

      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare build environment
        run: |
          BUILD_DIR=$HOME/stackops-build
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
          mkdir -p $BUILD_DIR
          rsync -av \
            --exclude={'.git','.github','.gitignore','*.pyc','__pycache__','*.deb','*.changes','*.build','*.buildinfo'} \
            . $BUILD_DIR/
          
          # Ensure debian/rules is executable
          chmod +x $BUILD_DIR/debian/rules

      - name: Update changelog
        run: |
          cd ${{ env.BUILD_DIR }}
          if [ -f debian/changelog ]; then
            dch --newversion ${{ env.VERSION }} "Release ${{ env.VERSION }}" --distribution jammy
          else
            dch --create --package stackops --newversion ${{ env.VERSION }} "Initial release" --distribution jammy
          fi
          dch --release ""

      - name: Build source package
        run: |
          cd ${{ env.BUILD_DIR }}
          # Ensure debian/rules is executable
          chmod +x debian/rules
          # Build source package
          dpkg-buildpackage -S -sa --no-sign

      - name: Sign package
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          cd $HOME
          
          # Create a helper script to handle signing
          cat > /tmp/sign-helper << EOF
          #!/bin/bash
          echo "$GPG_PASSPHRASE" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 "\$@"
          EOF
          chmod +x /tmp/sign-helper
          
          # Function to sign a file
          sign_file() {
            local file="\$1"
            echo "Signing \$file..."
            
            # Create detached signature
            /tmp/sign-helper --detach-sign --armor -u ${{ secrets.GPG_KEY_ID }} "\$file"
            
            if [ ! -f "\$file.asc" ]; then
              echo "Failed to create signature for \$file"
              return 1
            fi
            
            # Append signature to original file
            cat "\$file.asc" >> "\$file"
            rm "\$file.asc"
            echo "Successfully signed \$file"
          }
          
          # For debugging: Show files before signing
          echo "Files before signing:"
          ls -la stackops_${{ env.VERSION }}*
          
          # Sign the required files
          echo "Attempting to sign files..."
          for file in stackops_${{ env.VERSION }}.dsc stackops_${{ env.VERSION }}_source.changes; do
            if [ -f "\$file" ]; then
              # Create backup
              cp "\$file" "\$file.backup"
              
              # Try to sign
              if ! sign_file "\$file.backup"; then
                echo "Signing failed for \$file"
                # Debug output
                echo "GPG status:"
                gpg --list-secret-keys --keyid-format LONG
                exit 1
              fi
              
              # Replace original with signed version
              mv "\$file.backup" "\$file"
            else
              echo "File not found: \$file"
              exit 1
            fi
          done
          
          # For debugging: Show files after signing
          echo "Files after signing:"
          ls -la stackops_${{ env.VERSION }}*
          
          # Verify signatures
          echo "Verifying signatures..."
          for file in stackops_${{ env.VERSION }}.dsc stackops_${{ env.VERSION }}_source.changes; do
            echo "Verifying \$file..."
            gpg --verify "\$file" || true
          done

      - name: Configure dput
        run: |
          cat > ~/.dput.cf << EOF
          [${{ env.PPA_URL }}]
          fqdn = ppa.launchpad.net
          method = ftp
          incoming = ~anksji/stackops/ubuntu
          login = anonymous
          allow_unsigned_uploads = 0
          EOF

      - name: Upload to PPA
        run: |
          cd $HOME
          dput ${{ env.PPA_URL }} stackops_${{ env.VERSION }}_source.changes

      - name: Run Lintian checks
        continue-on-error: true
        run: |
          cd $HOME
          lintian --verbose stackops_${{ env.VERSION }}_source.changes

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            /home/runner/stackops_${{ env.VERSION }}_source.changes
            /home/runner/stackops_${{ env.VERSION }}.dsc
            /home/runner/stackops_${{ env.VERSION }}.tar.gz
          body: |
            Release version ${{ env.VERSION }}
            
            Package has been uploaded to ${{ env.PPA_URL }}
            
            To install:
            ```bash
            sudo add-apt-repository ${{ env.PPA_URL }}
            sudo apt-get update
            sudo apt-get install stackops
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ env.VERSION }}
          path: |
            /home/runner/stackops_${{ env.VERSION }}_source.changes
            /home/runner/stackops_${{ env.VERSION }}.dsc
            /home/runner/stackops_${{ env.VERSION }}.tar.gz
            /home/runner/stackops-build/debian/