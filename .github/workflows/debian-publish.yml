name: Build and Publish Debian Package

on:
  push:
    branches:
      - production
    tags:
      - 'v*'
  workflow_dispatch:

env:
  DEBFULLNAME: ${{ secrets.DEBFULLNAME }}
  DEBEMAIL: ${{ secrets.DEBEMAIL }}
  DEBIAN_FRONTEND: noninteractive
  PPA_URL: "ppa:anksji/stackops"

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            devscripts \
            debhelper \
            dh-make \
            gnupg \
            python3-all \
            python3-setuptools \
            dh-python \
            rsync \
            build-essential \
            lintian

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools wheel

      - name: Set up GPG
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo 'batch' > ~/.gnupg/gpg.conf
          echo 'pinentry-mode loopback' >> ~/.gnupg/gpg.conf
          echo 'no-tty' >> ~/.gnupg/gpg.conf
          echo 'allow-loopback-pinentry' > ~/.gnupg/gpg-agent.conf
          chmod 600 ~/.gnupg/*
          
          # Import keys
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo "${{ secrets.GPG_PUBLIC_KEY }}" | gpg --batch --import
          
          # Trust the key
          echo -e "5\ny\n" | gpg --batch --command-fd 0 --expert --edit-key ${{ secrets.GPG_KEY_ID }} trust
          
          # Verify setup
          gpg --list-secret-keys --keyid-format LONG

      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare build environment
        run: |
          BUILD_DIR=$HOME/stackops-build
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
          mkdir -p $BUILD_DIR
          rsync -av \
            --exclude={'.git','.github','.gitignore','*.pyc','__pycache__','*.deb','*.changes','*.build','*.buildinfo'} \
            . $BUILD_DIR/

      - name: Update changelog
        run: |
          cd ${{ env.BUILD_DIR }}
          if [ -f debian/changelog ]; then
            dch --newversion ${{ env.VERSION }} "Release ${{ env.VERSION }}" --distribution jammy
          else
            dch --create --package stackops --newversion ${{ env.VERSION }} "Initial release" --distribution jammy
          fi
          dch --release ""

      - name: Build source package
        run: |
          cd ${{ env.BUILD_DIR }}
          dpkg-buildpackage -S -sa --no-sign

      - name: Sign package
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          cd $HOME
          
          # Function to sign a file directly with GPG
          sign_file() {
            local input_file="$1"
            local output_file="$2"
            local temp_sig="${input_file}.asc"
            
            # Create detached signature using stored passphrase
            echo -n "$GPG_PASSPHRASE" | gpg --batch \
                                           --pinentry-mode loopback \
                                           --passphrase-fd 0 \
                                           --default-key "${{ secrets.GPG_KEY_ID }}" \
                                           --detach-sign \
                                           --armor \
                                           "${input_file}"
            
            # Combine original file and signature
            cat "${input_file}" > "${output_file}"
            cat "${temp_sig}" >> "${output_file}"
            rm -f "${temp_sig}"
          }
          
          # Don't use debsign, sign files directly
          for file in "stackops_${{ env.VERSION }}.dsc" "stackops_${{ env.VERSION }}_source.changes"; do
            echo "Signing $file..."
            
            # Create a temporary copy
            cp "$file" "${file}.orig"
            
            # Sign the file
            if sign_file "${file}.orig" "$file"; then
              echo "Successfully signed $file"
            else
              echo "Failed to sign $file"
              exit 1
            fi
            
            # Clean up
            rm -f "${file}.orig"
          done
          
          echo "Files after signing:"
          ls -la stackops_${{ env.VERSION }}*

      - name: Verify signatures
        run: |
          cd $HOME
          for file in "stackops_${{ env.VERSION }}.dsc" "stackops_${{ env.VERSION }}_source.changes"; do
            echo "Verifying $file..."
            gpg --verify "$file" || true
          done

      - name: Configure dput
        run: |
          cat > ~/.dput.cf << EOF
          [${{ env.PPA_URL }}]
          fqdn = ppa.launchpad.net
          method = ftp
          incoming = ~anksji/stackops/ubuntu
          login = anonymous
          allow_unsigned_uploads = 0
          EOF

      - name: Upload to PPA
        run: |
          cd $HOME
          dput ${{ env.PPA_URL }} stackops_${{ env.VERSION }}_source.changes

      - name: Run Lintian checks
        continue-on-error: true
        run: |
          cd $HOME
          lintian --verbose stackops_${{ env.VERSION }}_source.changes

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            /home/runner/stackops_${{ env.VERSION }}_source.changes
            /home/runner/stackops_${{ env.VERSION }}.dsc
            /home/runner/stackops_${{ env.VERSION }}.tar.gz
          body: |
            Release version ${{ env.VERSION }}
            
            Package has been uploaded to ${{ env.PPA_URL }}
            
            To install:
            ```bash
            sudo add-apt-repository ${{ env.PPA_URL }}
            sudo apt-get update
            sudo apt-get install stackops
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ env.VERSION }}
          path: |
            /home/runner/stackops_${{ env.VERSION }}_source.changes
            /home/runner/stackops_${{ env.VERSION }}.dsc
            /home/runner/stackops_${{ env.VERSION }}.tar.gz
            /home/runner/stackops-build/debian/